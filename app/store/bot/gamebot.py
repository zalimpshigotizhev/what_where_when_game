from typing import TYPE_CHECKING

from app.bot.game.models import GameState, StatusSession
from app.store.bot import replicas
from app.store.bot.fsm import FSMContext
from app.store.bot.keyboards import (
    are_ready_keyboard,
    main_keyboard,
    start_game_keyboard,
)
from app.store.bot.utils import (
    CallbackDataFilter,
    TextFilter,
    TypeFilter,
    filtered_handler,
)
from app.store.tg_api.dataclasses import CallbackTG, CommandTG

if TYPE_CHECKING:
    from app.web.app import Application


class GameProcessedError(Exception):
    pass


MAX_PLAYERS = 6
MIN_PLAYERS = 2


class BotBase:
    def __init__(self, app: "Application"):
        self.app = app
        self.unnecessary_messages: dict[int, list[int]] = {}
        self.handlers: list | None = None
        self._add_handlers_in_list()

    @property
    def game_s(self):
        return self.app.store.game_session

    @property
    def players(self):
        return self.app.store.players

    def _add_handlers_in_list(self):
        if self.handlers is None:
            self.handlers = []
            for attr_name in dir(self):
                if attr_name.startswith("handle_"):
                    attr = getattr(self, attr_name)
                    if callable(attr):
                        self.handlers.append(attr)
        return self.handlers

    async def add_message_in_unnecessary_messages(
        self, chat_id: int, message_id: int
    ) -> None:
        data = await self.app.store.fsm.get_data(chat_id)
        if (
            data.get("unnecessary_messages") is None
            or type(data.get("unnecessary_messages")) is not list
        ):
            data["unnecessary_messages"] = []

        data["unnecessary_messages"].append(message_id)
        await self.app.store.fsm.update_data(chat_id=chat_id, new_data=data)

    async def deleted_unnecessary_messages(self, chat_id: int):
        data = await self.app.store.fsm.get_data(chat_id)
        if data.get("unnecessary_messages") is None:
            return

        unnecessary_messages = data.get("unnecessary_messages")

        await self.app.store.tg_api.delete_messages(
            chat_id, unnecessary_messages
        )
        data["unnecessary_messages"] = []
        await self.app.store.fsm.update_data(chat_id=chat_id, new_data=data)

    async def cancel_game(self, chat_id: int, session_id: int):
        """–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–≥—Ä—ã. –û–Ω–∞ –æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        chat_id:: –ß–∞—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç –∏–≥—Ä–∞
        session_id:: –ê–∫—Ç–∏–≤–Ω—ã–π SessionModel –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å
        """
        await self.deleted_unnecessary_messages(chat_id=chat_id)
        await self.app.store.tg_api.send_message(
            chat_id=chat_id,
            text="–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –∫–æ–≥–¥–∞ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ "
            "–∏–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ –ø–æ—Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è - —è –±—É–¥—É –Ω–∞ –º–µ—Å—Ç–µ ü¶â",
        )
        await self.game_s.set_status(
            session_id=session_id, new_status=StatusSession.CANCELLED
        )

    async def ask_question(self, current_chat_id: int, session_id: int):
        """–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏
        –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ –æ–¥–Ω—É –º–∏–Ω—É—Ç—É.
        callback:: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞.
        context: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞.
        """
        await self.deleted_unnecessary_messages(chat_id=current_chat_id)
        await self.app.store.fsm.set_state(
            chat_id=current_chat_id, new_state=GameState.QUESTION_DISCUTION
        )

        await self.app.store.tg_api.send_message(
            current_chat_id, text="–ó–∞–¥–∞–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å."
        )


class MainGameBot(BotBase):
    @filtered_handler(TypeFilter(CommandTG), TextFilter("/back"))
    async def handle_back(
        self, command: CommandTG, context: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
        chat_id = command.chat.id_
        user_id = command.from_.id_

        active_sess = await self.game_s.get_active_session_by_chat_id(
            chat_id=chat_id, inload_players=True
        )

        if active_sess is None:
            await self.app.store.tg_api.send_message(
                chat_id,
                "–ò–≥—Ä–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ. \n"
                "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start",
            )
            return

        dict_idtg_to_players = {
            player.user.id_tg: player
            for player in active_sess.players
            if player.is_active
        }
        player = dict_idtg_to_players.get(user_id)
        if player is not None:
            if player.is_captain:
                await self.cancel_game(
                    chat_id=chat_id, session_id=active_sess.id
                )
                return
            await self.app.store.tg_api.send_message(
                chat_id, "*–ò–≥—Ä—É –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –∑–Ω–∞—Ç–æ–∫–æ–≤.* \n"
            )

    @filtered_handler(TypeFilter(CommandTG), TextFilter("/start"))
    async def handle_start_command(
        self, command: CommandTG, context: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
        chat_id = command.chat.id_

        active_sess = await self.game_s.get_active_session_by_chat_id(
            chat_id=chat_id
        )
        if active_sess is not None:
            if active_sess.status == StatusSession.PROCESSING:
                mess = await self.app.store.tg_api.send_message(
                    chat_id=chat_id,
                    text="*–°–µ–π—á–∞—Å –∏–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.*\n"
                    "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, \n"
                    "—Ç–æ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–∞–ø–∏—Ç–∞–Ω–∞ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É: \n"
                    "/back",
                )
                await self.add_message_in_unnecessary_messages(
                    chat_id=chat_id, message_id=mess.message_id
                )
                return

        else:
            await self.game_s.create_session(
                chat_id=chat_id,
                status=StatusSession.PENDING,
            )

        mess = await self.app.store.tg_api.send_message(
            chat_id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            main_keyboard,
        )
        await self.add_message_in_unnecessary_messages(
            chat_id=chat_id, message_id=mess.message_id
        )

    @filtered_handler(TypeFilter(CallbackTG), CallbackDataFilter("start_game"))
    async def handle_start_game(
        self, callback: CallbackTG, context: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
        chat_id = callback.chat.id_

        curr_sess = await self.game_s.get_active_session_by_chat_id(
            chat_id=chat_id,
        )

        if curr_sess.status == StatusSession.PROCESSING:
            await self.app.store.tg_api.answer_callback_query(
                callback.id_, "–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç –ø–æ–ª–Ω—ã–º —Ö–æ–¥–æ–º!!!"
            )
            return

        await self.players.create_player(
            session_id=curr_sess.id,
            id_tg=callback.from_.id_,
            username_tg=callback.from_.username,
            is_captain=True,
        )

        await self.deleted_unnecessary_messages(chat_id)

        await self.app.store.tg_api.answer_callback_query(
            callback.id_, "–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í—ã –±—É–¥–µ—Ç–µ –∫–∞–ø–∏—Ç–∞–Ω–æ–º."
        )
        mess = await self.app.store.tg_api.send_message(
            chat_id,
            f"–ò–≥—Ä–æ–∫ *@{callback.from_.username}* "
            f"–±—É–¥–µ—Ç –∫–∞–ø–∏—Ç–∞–Ω–æ–º –≤ –∫–æ–º–∞–Ω–¥–µ –∑–Ω–∞—Ç–æ–∫–æ–≤.\n"
            f"–ù–∞–∂–º–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –∏ –∂–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã.",
            reply_markup=start_game_keyboard,
        )

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º
        # mess.id –≤ –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.game_s.set_status(
            session_id=curr_sess.id, new_status=StatusSession.PROCESSING
        )
        await self.app.store.fsm.set_state(
            chat_id=chat_id, new_state=GameState.WAITING_FOR_PLAYERS
        )
        await self.add_message_in_unnecessary_messages(
            chat_id=chat_id, message_id=mess.message_id
        )

    @filtered_handler(TypeFilter(CallbackTG), CallbackDataFilter("show_rules"))
    async def handle_show_rules(
        self, callback: CallbackTG, context: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
        bot_message = await self.app.store.tg_api.send_message(
            callback.chat.id_, replicas.RULES_INFO
        )
        await self.add_message_in_unnecessary_messages(
            chat_id=callback.chat.id_, message_id=bot_message.message_id
        )

    @filtered_handler(TypeFilter(CallbackTG), CallbackDataFilter("show_rating"))
    async def handle_show_rating(
        self, callback: CallbackTG, context: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
        bot_message = await self.app.store.tg_api.send_message(
            callback.chat.id_, replicas.RATING_INFO
        )
        await self.add_message_in_unnecessary_messages(
            chat_id=callback.chat.id_, message_id=bot_message.message_id
        )


class WaitingPlayersProcessGameBot(BotBase):
    @filtered_handler(TypeFilter(CallbackTG), CallbackDataFilter("join_game"))
    async def handle_join_game(
        self, callback: CallbackTG, context: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
        chat_id = callback.chat.id_
        user_id = callback.from_.id_
        curr_sess = await self.game_s.get_active_session_by_chat_id(
            chat_id=chat_id, inload_players=True
        )
        if curr_sess is None:
            await self.app.store.tg_api.answer_callback_query(
                callback_query_id=callback.id_,
                text="–ò–≥—Ä—ã –∏—Ç–∞–∫ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
            )
            return

        active_connected_user_ids = [
            player.user.id_tg
            for player in curr_sess.players
            if player.is_active is True
        ]
        not_active_connected_user_ids = [
            player.user.id_tg
            for player in curr_sess.players
            if player.is_active is False
        ]

        if user_id in active_connected_user_ids:
            await self.app.store.tg_api.answer_callback_query(
                callback_query_id=callback.id_,
                text="–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!",
            )
            return

        if user_id in not_active_connected_user_ids:
            await self.players.set_player_is_active(
                session_id=curr_sess.id, id_tg=user_id, new_active=True
            )
        else:
            await self.players.create_player(
                session_id=curr_sess.id,
                id_tg=user_id,
                username_tg=callback.from_.username,
            )

        await self.app.store.tg_api.answer_callback_query(
            callback_query_id=callback.id_, text="–¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫ –∏–≥—Ä—ã!"
        )

    @filtered_handler(
        TypeFilter(CallbackTG), CallbackDataFilter("start_game_from_captain")
    )
    async def handle_start_game_from_captain(
        self, callback: CallbackTG, context: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
        chat_id = callback.chat.id_
        user_id = callback.from_.id_

        curr_sess = await self.game_s.get_active_session_by_chat_id(
            chat_id=chat_id, inload_players=True
        )
        if curr_sess is None:
            await self.app.store.tg_api.answer_callback_query(
                callback_query_id=callback.id_,
                text="–ò–≥—Ä—ã –∏—Ç–∞–∫ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
            )
            return

        dict_idtg_to_players = {
            player.user.id_tg: player
            for player in curr_sess.players
            if player.is_active
        }

        if user_id not in dict_idtg_to_players:
            await self.app.store.tg_api.answer_callback_query(
                callback_query_id=callback.id_,
                text="–í—ã –≤–æ–æ–±—â–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∏–≥—Ä–µ!",
            )
            return

        player = dict_idtg_to_players.get(user_id)

        if player.is_captain is True:
            await self.app.store.tg_api.answer_callback_query(
                callback_query_id=callback.id_,
                text="–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è GOOOOD LUCKK!",
            )

            mess = await self.app.store.tg_api.send_message(
                chat_id=callback.chat.id_,
                text="–ö–∞–ø–∏—Ç–∞–Ω –Ω–∞—á–∞–ª –∏–≥—Ä—É, –≥–æ—Ç–æ–≤—ã –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É?",
                reply_markup=are_ready_keyboard,
            )
            # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–∞–π–º–µ—Ä
            params_for_func = {
                "current_chat_id": chat_id,
                "session_id": curr_sess.id,
            }
            self.app.store.timer_manager.start_timer(
                chat_id=chat_id,
                timeout=5,
                timer_type="30_second_for_answer",
                callback=self.ask_question,
                # kwargs
                **params_for_func,
            )

            # –£–¥–∞–ª—è—é—Ç—Å—è –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.deleted_unnecessary_messages(chat_id=callback.chat.id_)
            await self.add_message_in_unnecessary_messages(
                chat_id=callback.chat.id_, message_id=mess.message_id
            )

        elif player.is_captain is False:
            await self.app.store.tg_api.answer_callback_query(
                callback_query_id=callback.id_,
                text="–ò–≥—Ä—É –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã!",
            )

    @filtered_handler(TypeFilter(CallbackTG), CallbackDataFilter("finish_game"))
    async def handle_finish_game(
        self, callback: CallbackTG, context: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
        chat_id = callback.chat.id_
        user_id = callback.from_.id_

        curr_sess = await self.game_s.get_active_session_by_chat_id(
            chat_id=chat_id, inload_players=True
        )
        if curr_sess is None:
            await self.app.store.tg_api.answer_callback_query(
                callback_query_id=callback.id_,
                text="–ò–≥—Ä—ã –∏—Ç–∞–∫ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
            )
            return

        dict_idtg_to_players = {
            player.user.id_tg: player
            for player in curr_sess.players
            if player.is_active
        }

        if user_id not in dict_idtg_to_players:
            await self.app.store.tg_api.answer_callback_query(
                callback_query_id=callback.id_,
                text="–í—ã –≤–æ–æ–±—â–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∏–≥—Ä–µ!",
            )
            return

        player = dict_idtg_to_players.get(user_id)
        if player.is_captain is True:
            await self.cancel_game(chat_id=chat_id, session_id=curr_sess.id)
            await self.app.store.tg_api.answer_callback_query(
                callback_query_id=callback.id_,
                text="–í—ã –∫–∞–ø–∏—Ç–∞–Ω –∏ –≤—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç–µ –∏–≥—Ä—É!",
            )

        elif player.is_captain is False:
            await self.players.set_player_is_active(
                session_id=curr_sess.id, id_tg=user_id, new_active=False
            )
            await self.app.store.tg_api.answer_callback_query(
                callback_query_id=callback.id_, text="–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã!"
            )


class AreReadyFirstRoundPlayersProcessGameBot(BotBase):
    @filtered_handler(TypeFilter(CallbackTG), CallbackDataFilter("ready"))
    async def handle_ready(
        self, callback: CallbackTG, context: FSMContext
    ) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
        chat_id = callback.chat.id_
        user_id = callback.from_.id_

        curr_sess = await self.game_s.get_active_session_by_chat_id(
            chat_id=chat_id, inload_players=True
        )

        dict_idtg_to_players = {
            player.user.id_tg: player
            for player in curr_sess.players
            if player.is_active
        }

        if user_id not in dict_idtg_to_players:
            await self.app.store.tg_api.answer_callback_query(
                callback_query_id=callback.id_,
                text="–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∏–≥—Ä—ã!",
            )
            return

        player = dict_idtg_to_players.get(user_id)

        if player.is_ready is True:
            await self.app.store.tg_api.answer_callback_query(
                callback_query_id=callback.id_,
                text="–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª–∏ —Å–≤–æ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.",
            )
            return

        await self.app.store.tg_api.answer_callback_query(
            callback_query_id=callback.id_,
            text="–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å!",
        )
        await self.players.set_player_is_ready(
            session_id=curr_sess.id, id_tg=user_id, new_active=True
        )

        active_connected_user_ids = [
            player.user.id_tg
            for player in curr_sess.players
            if player.is_active is True
        ]
        are_ready_connected_user_ids = [
            player.user.id_tg
            for player in curr_sess.players
            if player.is_active is True and player.is_ready
        ]
        are_ready_connected_user_ids.append(user_id)

        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –≥–æ—Ç–æ–≤—ã—Ö —Ä–æ–≤–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–µ—Å—Å–∏–∏,
        # —Ç–æ –Ω–µ –¥–æ–∂–∏–¥–∞–µ–º—Å—è —Ç–∞–π–º–µ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É, –∞ —Ç–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—è–µ–º
        if len(active_connected_user_ids) == len(are_ready_connected_user_ids):
            # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–ø—É—â–µ–Ω –≤
            # handle_start_game_from_captain
            self.app.store.timer_manager.cancel_timer(
                chat_id=chat_id, timer_type="30_second_for_answer"
            )

            await self.ask_question(
                current_chat_id=chat_id, session_id=curr_sess.id
            )


class QuestionDiscussionProcessGameBot(BotBase):
    pass


class VerdictCaptain(BotBase):
    pass


class WaitAnswer(BotBase):
    pass


class AreReadyNextRoundPlayersProcessGameBot(BotBase):
    pass
